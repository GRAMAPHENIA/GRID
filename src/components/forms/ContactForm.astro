---
// Componente de formulario de contacto con validación client-side
// Incluye campos para nombre, email, tipo de consulta y mensaje
// Implementa accesibilidad completa y estados de loading/success
---

<form id="contact-form" class="contact-form space-y-6" novalidate>
  <!-- Campo Nombre -->
  <div class="form-group">
    <label for="name" class="block text-xs sm:text-sm font-medium text-almost-black mb-2">
      Nombre completo *
    </label>
    <input
      type="text"
      id="name"
      name="name"
      required
      aria-describedby="name-error"
      class="w-full px-3 sm:px-4 py-2 sm:py-3 bg-pure-white border border-neutral-300 rounded-lg text-almost-black placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-ochre-500 focus:border-transparent transition-colors text-sm sm:text-base"
      placeholder="Tu nombre completo"
    />
    <div id="name-error" class="error-message hidden text-red-600 text-xs sm:text-sm mt-1" role="alert"></div>
  </div>

  <!-- Campo Email -->
  <div class="form-group">
    <label for="email" class="block text-xs sm:text-sm font-medium text-almost-black mb-2">
      Correo electrónico *
    </label>
    <input
      type="email"
      id="email"
      name="email"
      required
      aria-describedby="email-error"
      class="w-full px-3 sm:px-4 py-2 sm:py-3 bg-pure-white border border-neutral-300 rounded-lg text-almost-black placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-ochre-500 focus:border-transparent transition-colors text-sm sm:text-base"
      placeholder="tu@email.com"
    />
    <div id="email-error" class="error-message hidden text-red-600 text-xs sm:text-sm mt-1" role="alert"></div>
  </div>

  <!-- Campo Tipo de Consulta -->
  <div class="form-group">
    <label for="inquiry-type" class="block text-xs sm:text-sm font-medium text-almost-black mb-2">
      Tipo de consulta *
    </label>
    <select
      id="inquiry-type"
      name="inquiryType"
      required
      aria-describedby="inquiry-type-error"
      class="w-full px-3 sm:px-4 py-2 sm:py-3 bg-pure-white border border-neutral-300 rounded-lg text-almost-black focus:outline-none focus:ring-2 focus:ring-ochre-500 focus:border-transparent transition-colors text-sm sm:text-base"
    >
      <option value="">Selecciona una opción</option>
      <option value="construction">Construcción de instrumento</option>
      <option value="repair">Reparación</option>
      <option value="restoration">Restauración</option>
      <option value="setup">Setup y ajustes</option>
      <option value="consultation">Consulta general</option>
      <option value="other">Otro</option>
    </select>
    <div id="inquiry-type-error" class="error-message hidden text-red-600 text-xs sm:text-sm mt-1" role="alert"></div>
  </div>

  <!-- Campo Mensaje -->
  <div class="form-group">
    <label for="message" class="block text-xs sm:text-sm font-medium text-almost-black mb-2">
      Mensaje *
    </label>
    <textarea
      id="message"
      name="message"
      required
      rows="5"
      aria-describedby="message-error"
      class="w-full px-3 sm:px-4 py-2 sm:py-3 bg-pure-white border border-neutral-300 rounded-lg text-almost-black placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-ochre-500 focus:border-transparent transition-colors resize-vertical text-sm sm:text-base min-h-[120px] sm:min-h-[140px]"
      placeholder="Cuéntanos sobre tu proyecto o consulta..."
    ></textarea>
    <div id="message-error" class="error-message hidden text-red-600 text-xs sm:text-sm mt-1" role="alert"></div>
  </div>

  <!-- Botón de envío -->
  <div class="form-actions">
    <button
      type="submit"
      class="w-full bg-almost-black hover:bg-neutral-800 text-pure-white font-medium py-2 sm:py-3 px-4 sm:px-6 rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-almost-black focus:ring-offset-2 focus:ring-offset-pure-white disabled:opacity-50 disabled:cursor-not-allowed hover:scale-[1.02] text-sm sm:text-base"
      id="submit-btn"
    >
      <span class="submit-text">Enviar mensaje</span>
      <span class="loading-text hidden">Enviando...</span>
    </button>
  </div>

  <!-- Mensaje de éxito -->
  <div id="success-message" class="hidden bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded-lg" role="alert">
    <div class="flex items-center">
      <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
      </svg>
      <span>¡Mensaje enviado correctamente! Te contactaremos pronto.</span>
    </div>
  </div>

  <!-- Mensaje de error general -->
  <div id="error-message" class="hidden bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-lg" role="alert">
    <div class="flex items-center">
      <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
      </svg>
      <span>Hubo un error al enviar el mensaje. Por favor, inténtalo de nuevo.</span>
    </div>
  </div>
</form>

<script>
  // Validación y manejo del formulario de contacto
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const submitText = submitBtn.querySelector('.submit-text') as HTMLElement;
    const loadingText = submitBtn.querySelector('.loading-text') as HTMLElement;
    const successMessage = document.getElementById('success-message') as HTMLElement;
    const errorMessage = document.getElementById('error-message') as HTMLElement;

    // Funciones de validación
    function validateField(field: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement): boolean {
      const errorElement = document.getElementById(`${field.name}-error`) || document.getElementById(`${field.id}-error`);
      let isValid = true;
      let errorMsg = '';

      // Limpiar errores previos
      if (errorElement) {
        errorElement.textContent = '';
        errorElement.classList.add('hidden');
      }
      field.classList.remove('border-red-500');

      // Validación por tipo de campo
      if (field.hasAttribute('required') && !field.value.trim()) {
        isValid = false;
        errorMsg = 'Este campo es obligatorio';
      } else if (field.type === 'email' && field.value) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(field.value)) {
          isValid = false;
          errorMsg = 'Por favor, ingresa un email válido';
        }
      } else if (field.name === 'name' && field.value.trim().length < 2) {
        isValid = false;
        errorMsg = 'El nombre debe tener al menos 2 caracteres';
      } else if (field.name === 'message' && field.value.trim().length < 10) {
        isValid = false;
        errorMsg = 'El mensaje debe tener al menos 10 caracteres';
      }

      // Mostrar error si existe
      if (!isValid && errorElement) {
        errorElement.textContent = errorMsg;
        errorElement.classList.remove('hidden');
        field.classList.add('border-red-500');
      }

      return isValid;
    }

    function validateForm(): boolean {
      const fields = form.querySelectorAll('input[required], textarea[required], select[required]');
      let isFormValid = true;

      fields.forEach(field => {
        const fieldValid = validateField(field as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement);
        if (!fieldValid) {
          isFormValid = false;
        }
      });

      return isFormValid;
    }

    // Validación en tiempo real
    const formFields = form.querySelectorAll('input, textarea, select');
    formFields.forEach(field => {
      field.addEventListener('blur', () => {
        validateField(field as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement);
      });

      field.addEventListener('input', () => {
        // Limpiar errores mientras el usuario escribe
        const errorElement = document.getElementById(`${field.getAttribute('name')}-error`) || document.getElementById(`${field.id}-error`);
        if (errorElement && !errorElement.classList.contains('hidden')) {
          field.classList.remove('border-red-500');
          errorElement.classList.add('hidden');
        }
      });
    });

    // Manejo del envío del formulario
    form.addEventListener('submit', async function(e) {
      e.preventDefault();

      // Ocultar mensajes previos
      successMessage.classList.add('hidden');
      errorMessage.classList.add('hidden');

      // Validar formulario
      if (!validateForm()) {
        return;
      }

      // Estado de loading
      submitBtn.disabled = true;
      submitText.classList.add('hidden');
      loadingText.classList.remove('hidden');

      try {
        // Simular envío (en producción aquí iría la lógica real de envío)
        await new Promise(resolve => setTimeout(resolve, 2000));

        // Mostrar éxito
        successMessage.classList.remove('hidden');
        form.reset();

        // Scroll al mensaje de éxito
        successMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });

      } catch (error) {
        // Mostrar error
        errorMessage.classList.remove('hidden');
        console.error('Error al enviar formulario:', error);
      } finally {
        // Restaurar botón
        submitBtn.disabled = false;
        submitText.classList.remove('hidden');
        loadingText.classList.add('hidden');
      }
    });
  });
</script>

<style>
  /* Estilos adicionales para el formulario */
  .form-group {
    position: relative;
  }

  /* Mejorar el aspecto del select */
  select {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%23525252' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.75rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem;
    appearance: none;
  }

  /* Estados de focus mejorados */
  input:focus,
  textarea:focus,
  select:focus {
    box-shadow: 0 0 0 3px rgba(210, 105, 30, 0.1);
  }

  /* Animaciones suaves para mensajes */
  #success-message,
  #error-message {
    animation: slideIn 0.3s ease-out;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .form-actions button {
      padding: 0.75rem 1rem;
      font-size: 0.875rem;
    }
    
    /* Ajustar espaciado en móviles */
    .contact-form {
      gap: 1rem;
    }
    
    /* Mejorar el select en móviles */
    select {
      background-size: 1.25em 1.25em;
      padding-right: 2rem;
    }
    
    /* Textarea más compacto en móviles */
    textarea {
      min-height: 100px;
    }
  }
  
  @media (min-width: 641px) and (max-width: 768px) {
    /* Tablet adjustments */
    .contact-form {
      gap: 1.25rem;
    }
    
    textarea {
      min-height: 120px;
    }
  }
  
  @media (min-width: 769px) {
    /* Desktop optimizations */
    .contact-form {
      gap: 1.5rem;
    }
    
    textarea {
      min-height: 140px;
    }
  }
</style>