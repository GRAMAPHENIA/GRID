---
// Header con navegación responsive usando solo HTML y CSS
import type { NavigationItem } from "../../types";

// Elementos de navegación principal
const navigationItems: NavigationItem[] = [
  { label: "Inicio", href: "/", active: Astro.url.pathname === "/" },
  {
    label: "Trabajos",
    href: "/works",
    active: Astro.url.pathname.startsWith("/works"),
  },
  {
    label: "Servicios",
    href: "/services",
    active: Astro.url.pathname === "/services",
  },
  {
    label: "Acerca de",
    href: "/about",
    active: Astro.url.pathname === "/about",
  },
  {
    label: "Contacto",
    href: "/contact",
    active: Astro.url.pathname === "/contact",
  },
];
---

<header class="bg-white border-b border-neutral-200 sticky top-0 z-50 pb-1">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-end justify-between h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a
          href="/"
          class="text-xl font-bold text-almost-black hover:text-neutral-700 transition-colors duration-200"
          aria-label="Carpena Guitars - Ir al inicio"
        >
          Carpena Guitars
        </a>
      </div>

      <!-- Navegación desktop -->
      <nav class="hidden md:block" aria-label="Navegación principal">
        <ul class="flex space-x-1">
          {
            navigationItems.map((item) => (
              <li>
                <a
                  href={item.href}
                  class={`px-4 py-2 text-sm font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-ochre-400 focus:ring-opacity-50 focus:ring-offset-1 relative ${
                    item.active
                      ? "text-ochre-600 border-b-2 border-ochre-600 mb-[-1px]"
                      : "text-neutral-700 hover:text-almost-black"
                  }`}
                  aria-current={item.active ? "page" : undefined}
                >
                  {item.label}
                </a>
              </li>
            ))
          }
        </ul>
      </nav>

      <!-- Botón menú móvil -->
      <div class="md:hidden">
        <button
          class="mobile-menu-button p-2 text-neutral-700 hover:text-almost-black transition-all duration-200 cursor-pointer focus:outline-none focus:ring-2 focus:ring-ochre-400 focus:ring-opacity-50 focus:ring-offset-1 rounded-lg"
          aria-label="Abrir menú de navegación"
          aria-expanded="false"
        >
          <!-- Icono hamburguesa -->
          <svg
            class="h-5 w-5"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Menú móvil -->
  <div
    class="mobile-menu absolute top-full left-0 right-0 bg-white border-b border-neutral-200 shadow-lg hidden"
    id="mobile-menu"
  >
    <nav
      class="px-4 py-4 space-y-2"
      role="navigation"
      aria-label="Navegación móvil"
    >
      {
        navigationItems.map((item) => (
          <a
            href={item.href}
            class={`block px-4 py-3 text-base font-medium rounded-lg transition-colors duration-200 ${
              item.active
                ? "text-ochre-600 bg-ochre-50"
                : "text-neutral-700 hover:text-almost-black hover:bg-neutral-50"
            }`}
            aria-current={item.active ? "page" : undefined}
          >
            {item.label}
          </a>
        ))
      }
    </nav>
  </div>
</header>

<script>
  // Funcionalidad del menú móvil
  document.addEventListener("DOMContentLoaded", function () {
    const mobileMenuButton = document.querySelector(
      ".mobile-menu-button",
    ) as HTMLButtonElement;
    const mobileMenu = document.getElementById("mobile-menu");

    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener("click", function () {
        const isHidden = mobileMenu.classList.contains("hidden");

        if (isHidden) {
          mobileMenu.classList.remove("hidden");
          mobileMenuButton.setAttribute("aria-expanded", "true");
        } else {
          mobileMenu.classList.add("hidden");
          mobileMenuButton.setAttribute("aria-expanded", "false");
        }
      });

      // Cerrar menú al hacer clic fuera
      document.addEventListener("click", function (event) {
        const target = event.target as Node;
        if (
          !mobileMenuButton.contains(target) &&
          !mobileMenu.contains(target)
        ) {
          mobileMenu.classList.add("hidden");
          mobileMenuButton.setAttribute("aria-expanded", "false");
        }
      });

      // Cerrar menú con Escape
      document.addEventListener("keydown", function (event) {
        if (
          event.key === "Escape" &&
          !mobileMenu.classList.contains("hidden")
        ) {
          mobileMenu.classList.add("hidden");
          mobileMenuButton.setAttribute("aria-expanded", "false");
          mobileMenuButton.focus();
        }
      });
    }
  });
</script>
